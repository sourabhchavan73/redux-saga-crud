{"ast":null,"code":"import { takeEvery, put, delay, fork, call } from 'redux-saga/effects';\nimport { loadUserAPI } from '../../../apis/user';\nimport { loadUserFailed, loadUserSuccess, createUserSuccess } from '../../actions';\nimport * as types from '../../actions/types';\nexport function* onLoadUserStartAsync() {\n  try {\n    const response = yield call(loadUserAPI);\n\n    if (response.status === 200) {\n      yield delay(500);\n      yield put(loadUserSuccess(response.data));\n    }\n  } catch (error) {\n    yield put(loadUserFailed(error.response.data));\n  }\n}\n;\nexport function* onLoaduser() {\n  yield takeEvery(types.LOAD_USER_START, onLoadUserStartAsync);\n}\n; // export function* onCreateUserStartAsync(action){\n//     try{\n//         const response = yield call (userAPI, action.payload);\n//         if(response.status === 200){\n//             yield delay(500);\n//             yield put(createUserSuccess(response.data))\n//         }\n//     }\n// }\n// export function* onCreateuser(){\n//     yield takeEvery(types.CREATE_USER_START, onCreateUserStartAsync)\n// };\n\nconst userSagas = [fork(onLoaduser), fork(onCreateuser)];\nexport default userSagas;","map":{"version":3,"sources":["F:/redux-saga/redux-saga-crud/src/redux/saga/handler/userSaga.js"],"names":["takeEvery","put","delay","fork","call","loadUserAPI","loadUserFailed","loadUserSuccess","createUserSuccess","types","onLoadUserStartAsync","response","status","data","error","onLoaduser","LOAD_USER_START","userSagas","onCreateuser"],"mappings":"AAAA,SACIA,SADJ,EAEIC,GAFJ,EAGIC,KAHJ,EAIIC,IAJJ,EAKIC,IALJ,QAMO,oBANP;AAQA,SAASC,WAAT,QAA4B,oBAA5B;AACA,SAASC,cAAT,EAAyBC,eAAzB,EAA0CC,iBAA1C,QAAmE,eAAnE;AACA,OAAO,KAAKC,KAAZ,MAAuB,qBAAvB;AAEA,OAAO,UAAUC,oBAAV,GAAgC;AACnC,MAAG;AACC,UAAMC,QAAQ,GAAG,MAAMP,IAAI,CAACC,WAAD,CAA3B;;AAEA,QAAIM,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA4B;AACxB,YAAMV,KAAK,CAAC,GAAD,CAAX;AACA,YAAMD,GAAG,CAACM,eAAe,CAACI,QAAQ,CAACE,IAAV,CAAhB,CAAT;AACH;AACJ,GAPD,CAQA,OAAOC,KAAP,EAAa;AACT,UAAMb,GAAG,CAACK,cAAc,CAACQ,KAAK,CAACH,QAAN,CAAeE,IAAhB,CAAf,CAAT;AACH;AACJ;AAAA;AAED,OAAO,UAAUE,UAAV,GAAsB;AACzB,QAAMf,SAAS,CAACS,KAAK,CAACO,eAAP,EAAwBN,oBAAxB,CAAf;AACH;AAAA,C,CAED;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;;AAEA,MAAMO,SAAS,GAAG,CACdd,IAAI,CAACY,UAAD,CADU,EAEdZ,IAAI,CAACe,YAAD,CAFU,CAAlB;AAKA,eAAeD,SAAf","sourcesContent":["import {\r\n    takeEvery,\r\n    put,\r\n    delay,\r\n    fork,\r\n    call\r\n} from 'redux-saga/effects';\r\n\r\nimport { loadUserAPI } from '../../../apis/user';\r\nimport { loadUserFailed, loadUserSuccess, createUserSuccess } from '../../actions';\r\nimport * as types from '../../actions/types'\r\n\r\nexport function* onLoadUserStartAsync(){\r\n    try{\r\n        const response = yield call(loadUserAPI)\r\n        \r\n        if (response.status === 200){\r\n            yield delay(500);\r\n            yield put(loadUserSuccess(response.data))\r\n        } \r\n    }\r\n    catch (error){\r\n        yield put(loadUserFailed(error.response.data))\r\n    }\r\n};\r\n\r\nexport function* onLoaduser(){\r\n    yield takeEvery(types.LOAD_USER_START, onLoadUserStartAsync)\r\n};\r\n\r\n// export function* onCreateUserStartAsync(action){\r\n//     try{\r\n//         const response = yield call (userAPI, action.payload);\r\n\r\n//         if(response.status === 200){\r\n//             yield delay(500);\r\n//             yield put(createUserSuccess(response.data))\r\n//         }\r\n\r\n//     }\r\n// }\r\n\r\n// export function* onCreateuser(){\r\n//     yield takeEvery(types.CREATE_USER_START, onCreateUserStartAsync)\r\n// };\r\n\r\nconst userSagas = [\r\n    fork(onLoaduser),\r\n    fork(onCreateuser)\r\n];\r\n\r\nexport default userSagas;"]},"metadata":{},"sourceType":"module"}