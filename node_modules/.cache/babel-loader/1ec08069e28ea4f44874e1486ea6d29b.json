{"ast":null,"code":"import { takeEvery, takeLatest, put, delay, fork, call } from 'redux-saga/effects';\nimport { loadUserAPI, createUserAPI, deleteUserAPI } from '../../../apis/user';\nimport { deleteUserSuccess, loadUserFailed, loadUserSuccess, createUserSuccess, createUserFailed } from '../../actions';\nimport * as types from '../../actions/types';\nexport function* onLoadUserStartAsync() {\n  try {\n    const response = yield call(loadUserAPI);\n\n    if (response.status === 200) {\n      yield delay(500);\n      yield put(loadUserSuccess(response.data));\n    }\n  } catch (error) {\n    yield put(loadUserFailed(error.response.data));\n  }\n}\n;\nexport function* onLoaduser() {\n  yield takeEvery(types.LOAD_USER_START, onLoadUserStartAsync);\n}\n;\n\nfunction* onCreateUserStartAsync(action) {\n  try {\n    const response = yield call(createUserAPI, action.payload);\n\n    if (response.status === 200) {\n      yield put(createUserSuccess(response.data));\n    }\n  } catch (error) {\n    yield put(createUserFailed(error.response.data));\n  }\n}\n\nfunction* onCreateuser() {\n  yield takeLatest(types.CREATE_USER_START, onCreateUserStartAsync);\n}\n\n;\n\nfunction* onDeleteUserStartAsync(id) {\n  try {\n    const response = yield call(deleteUserAPI, id);\n\n    if (response.status === 200) {\n      yield put(deleteUserSuccess(response.data));\n    }\n  } catch (error) {\n    yield put(createUserFailed(error.response.data));\n  }\n}\n\nfunction* onDeleteuser() {\n  while (true) {\n    const {\n      payload: id\n    } = yield take(types.DELETE_USER_START);\n    yield call(onDeleteUserStartAsync, id);\n  }\n}\n\n;\nconst userSagas = [fork(onLoaduser), fork(onCreateuser), fork(onDeleteuser)];\nexport default userSagas;","map":{"version":3,"sources":["F:/redux-saga/redux-saga-crud/src/redux/saga/handler/userSaga.js"],"names":["takeEvery","takeLatest","put","delay","fork","call","loadUserAPI","createUserAPI","deleteUserAPI","deleteUserSuccess","loadUserFailed","loadUserSuccess","createUserSuccess","createUserFailed","types","onLoadUserStartAsync","response","status","data","error","onLoaduser","LOAD_USER_START","onCreateUserStartAsync","action","payload","onCreateuser","CREATE_USER_START","onDeleteUserStartAsync","id","onDeleteuser","take","DELETE_USER_START","userSagas"],"mappings":"AAAA,SACIA,SADJ,EAEIC,UAFJ,EAGIC,GAHJ,EAIIC,KAJJ,EAKIC,IALJ,EAMIC,IANJ,QAOO,oBAPP;AASA,SAASC,WAAT,EAAsBC,aAAtB,EAAqCC,aAArC,QAA0D,oBAA1D;AACA,SAASC,iBAAT,EAA4BC,cAA5B,EAA4CC,eAA5C,EAA6DC,iBAA7D,EAAgFC,gBAAhF,QAAwG,eAAxG;AACA,OAAO,KAAKC,KAAZ,MAAuB,qBAAvB;AAEA,OAAO,UAAUC,oBAAV,GAAgC;AACnC,MAAG;AACC,UAAMC,QAAQ,GAAG,MAAMX,IAAI,CAACC,WAAD,CAA3B;;AAEA,QAAIU,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA4B;AACxB,YAAMd,KAAK,CAAC,GAAD,CAAX;AACA,YAAMD,GAAG,CAACS,eAAe,CAACK,QAAQ,CAACE,IAAV,CAAhB,CAAT;AACH;AACJ,GAPD,CAQA,OAAOC,KAAP,EAAa;AACT,UAAMjB,GAAG,CAACQ,cAAc,CAACS,KAAK,CAACH,QAAN,CAAeE,IAAhB,CAAf,CAAT;AACH;AACJ;AAAA;AAED,OAAO,UAAUE,UAAV,GAAsB;AACzB,QAAMpB,SAAS,CAACc,KAAK,CAACO,eAAP,EAAwBN,oBAAxB,CAAf;AACH;AAAA;;AAED,UAAUO,sBAAV,CAAiCC,MAAjC,EAAwC;AACpC,MAAG;AACC,UAAMP,QAAQ,GAAG,MAAMX,IAAI,CAAEE,aAAF,EAAiBgB,MAAM,CAACC,OAAxB,CAA3B;;AAEA,QAAGR,QAAQ,CAACC,MAAT,KAAoB,GAAvB,EAA2B;AACvB,YAAMf,GAAG,CAACU,iBAAiB,CAACI,QAAQ,CAACE,IAAV,CAAlB,CAAT;AACH;AACJ,GAND,CAOA,OAAOC,KAAP,EAAa;AACT,UAAMjB,GAAG,CAACW,gBAAgB,CAACM,KAAK,CAACH,QAAN,CAAeE,IAAhB,CAAjB,CAAT;AACH;AACJ;;AAED,UAAUO,YAAV,GAAwB;AACpB,QAAMxB,UAAU,CAACa,KAAK,CAACY,iBAAP,EAA0BJ,sBAA1B,CAAhB;AACH;;AAAA;;AAED,UAAUK,sBAAV,CAAiCC,EAAjC,EAAoC;AAChC,MAAG;AACC,UAAMZ,QAAQ,GAAG,MAAMX,IAAI,CAAEG,aAAF,EAAkBoB,EAAlB,CAA3B;;AAEA,QAAGZ,QAAQ,CAACC,MAAT,KAAoB,GAAvB,EAA2B;AACvB,YAAMf,GAAG,CAACO,iBAAiB,CAACO,QAAQ,CAACE,IAAV,CAAlB,CAAT;AACH;AACJ,GAND,CAOA,OAAOC,KAAP,EAAa;AACT,UAAMjB,GAAG,CAACW,gBAAgB,CAACM,KAAK,CAACH,QAAN,CAAeE,IAAhB,CAAjB,CAAT;AACH;AACJ;;AAED,UAAUW,YAAV,GAAwB;AACpB,SAAM,IAAN,EAAW;AACP,UAAM;AAACL,MAAAA,OAAO,EAAEI;AAAV,QAAgB,MAAME,IAAI,CAAChB,KAAK,CAACiB,iBAAP,CAAhC;AACA,UAAM1B,IAAI,CAACsB,sBAAD,EAAyBC,EAAzB,CAAV;AACH;AACJ;;AAAA;AAED,MAAMI,SAAS,GAAG,CACd5B,IAAI,CAACgB,UAAD,CADU,EAEdhB,IAAI,CAACqB,YAAD,CAFU,EAGdrB,IAAI,CAACyB,YAAD,CAHU,CAAlB;AAMA,eAAeG,SAAf","sourcesContent":["import {\r\n    takeEvery,\r\n    takeLatest,\r\n    put,\r\n    delay,\r\n    fork,\r\n    call\r\n} from 'redux-saga/effects';\r\n\r\nimport { loadUserAPI, createUserAPI, deleteUserAPI } from '../../../apis/user';\r\nimport { deleteUserSuccess, loadUserFailed, loadUserSuccess, createUserSuccess, createUserFailed } from '../../actions';\r\nimport * as types from '../../actions/types'\r\n\r\nexport function* onLoadUserStartAsync(){\r\n    try{\r\n        const response = yield call(loadUserAPI)\r\n        \r\n        if (response.status === 200){\r\n            yield delay(500);\r\n            yield put(loadUserSuccess(response.data))\r\n        } \r\n    }\r\n    catch (error){\r\n        yield put(loadUserFailed(error.response.data))\r\n    }\r\n};\r\n\r\nexport function* onLoaduser(){\r\n    yield takeEvery(types.LOAD_USER_START, onLoadUserStartAsync)\r\n};\r\n\r\nfunction* onCreateUserStartAsync(action){\r\n    try{\r\n        const response = yield call (createUserAPI, action.payload);\r\n\r\n        if(response.status === 200){\r\n            yield put(createUserSuccess(response.data))\r\n        }\r\n    }\r\n    catch (error){\r\n        yield put(createUserFailed(error.response.data))\r\n    }\r\n}\r\n\r\nfunction* onCreateuser(){\r\n    yield takeLatest(types.CREATE_USER_START, onCreateUserStartAsync)\r\n};\r\n\r\nfunction* onDeleteUserStartAsync(id){\r\n    try{\r\n        const response = yield call (deleteUserAPI , id);\r\n\r\n        if(response.status === 200){\r\n            yield put(deleteUserSuccess(response.data))\r\n        }\r\n    }\r\n    catch (error){\r\n        yield put(createUserFailed(error.response.data))\r\n    }\r\n}\r\n\r\nfunction* onDeleteuser(){\r\n    while(true){\r\n        const {payload: id} = yield take(types.DELETE_USER_START)\r\n        yield call(onDeleteUserStartAsync, id)\r\n    }\r\n};\r\n\r\nconst userSagas = [\r\n    fork(onLoaduser),\r\n    fork(onCreateuser),\r\n    fork(onDeleteuser)\r\n];\r\n\r\nexport default userSagas;"]},"metadata":{},"sourceType":"module"}