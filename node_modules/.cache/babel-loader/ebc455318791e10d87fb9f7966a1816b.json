{"ast":null,"code":"import { takeEvery, put, delay, fork, call } from 'redux-saga/effects';\nimport userAPI from '../../../apis/user';\nimport { loadUserFailed, loadUserSuccess } from '../../actions';\nimport * as types from '../../actions/types';\nexport function* onLoadUserStartAsync() {\n  try {\n    const response = yield call(userAPI);\n\n    if (response.status === 200) {\n      yield delay(500);\n      yield put(loadUserSuccess(response.data));\n    }\n  } catch (error) {\n    yield put(loadUserFailed(error.response.data));\n  }\n}\n;\nexport function* onLoaduser() {\n  yield takeEvery(types.LOAD_USER_START, onLoadUserStartAsync);\n}\n;\nconst userSagas = [fork(onLoaduser)];\nexport default userSagas;","map":{"version":3,"sources":["F:/redux-saga/redux-saga-crud/src/redux/saga/handler/userSaga.js"],"names":["takeEvery","put","delay","fork","call","userAPI","loadUserFailed","loadUserSuccess","types","onLoadUserStartAsync","response","status","data","error","onLoaduser","LOAD_USER_START","userSagas"],"mappings":"AAAA,SACIA,SADJ,EAEIC,GAFJ,EAGIC,KAHJ,EAIIC,IAJJ,EAKIC,IALJ,QAMO,oBANP;AAOA,OAAQC,OAAR,MAAsB,oBAAtB;AACA,SAASC,cAAT,EAAyBC,eAAzB,QAAgD,eAAhD;AACA,OAAO,KAAKC,KAAZ,MAAuB,qBAAvB;AAEA,OAAO,UAAUC,oBAAV,GAAgC;AACnC,MAAG;AACC,UAAMC,QAAQ,GAAG,MAAMN,IAAI,CAACC,OAAD,CAA3B;;AAEA,QAAIK,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA4B;AACxB,YAAMT,KAAK,CAAC,GAAD,CAAX;AACA,YAAMD,GAAG,CAACM,eAAe,CAACG,QAAQ,CAACE,IAAV,CAAhB,CAAT;AACH;AACJ,GAPD,CAQA,OAAOC,KAAP,EAAa;AACT,UAAMZ,GAAG,CAACK,cAAc,CAACO,KAAK,CAACH,QAAN,CAAeE,IAAhB,CAAf,CAAT;AACH;AACJ;AAAA;AAED,OAAO,UAAUE,UAAV,GAAsB;AACzB,QAAMd,SAAS,CAACQ,KAAK,CAACO,eAAP,EAAwBN,oBAAxB,CAAf;AACH;AAAA;AAED,MAAMO,SAAS,GAAG,CACdb,IAAI,CAACW,UAAD,CADU,CAAlB;AAIA,eAAeE,SAAf","sourcesContent":["import {\r\n    takeEvery,\r\n    put,\r\n    delay,\r\n    fork,\r\n    call\r\n} from 'redux-saga/effects';\r\nimport  userAPI  from '../../../apis/user';\r\nimport { loadUserFailed, loadUserSuccess } from '../../actions';\r\nimport * as types from '../../actions/types'\r\n\r\nexport function* onLoadUserStartAsync(){\r\n    try{\r\n        const response = yield call(userAPI)\r\n        \r\n        if (response.status === 200){\r\n            yield delay(500);\r\n            yield put(loadUserSuccess(response.data))\r\n        } \r\n    }\r\n    catch (error){\r\n        yield put(loadUserFailed(error.response.data))\r\n    }\r\n};\r\n\r\nexport function* onLoaduser(){\r\n    yield takeEvery(types.LOAD_USER_START, onLoadUserStartAsync)\r\n};\r\n\r\nconst userSagas = [\r\n    fork(onLoaduser)\r\n];\r\n\r\nexport default userSagas;"]},"metadata":{},"sourceType":"module"}