{"ast":null,"code":"// import {\n//     takeEvery,\n//     takeLatest,\n//     take,\n//     put,\n//     delay,\n//     fork,\n//     call\n// } from 'redux-saga/effects';\n// import { loadUserAPI, createUserAPI, deleteUserAPI, updateUserAPI } from '../../../apis/user';\n// import { deleteUserSuccess, deleteUserFailed, loadUserFailed, loadUserSuccess, createUserSuccess, createUserFailed, updateUserSuccess } from '../../actions';\n// import * as types from '../../actions/types'\n// export function* onLoadUserStartAsync(){\n//     try{\n//         const response = yield call(loadUserAPI)\n//         if (response.status === 200){\n//             yield delay(500);\n//             yield put(loadUserSuccess(response.data))\n//         } \n//     }\n//     catch (error){\n//         yield put(loadUserFailed(error.response.data))\n//     }\n// };\n// export function* onLoaduser(){\n//     yield takeEvery(types.LOAD_USER_START, onLoadUserStartAsync)\n// };\n// function* onCreateUserStartAsync(action){\n//     try{\n//         const response = yield call (createUserAPI, action.payload);\n//         if(response.status === 200){\n//             yield put(createUserSuccess(response.data))\n//         }\n//     }\n//     catch (error){\n//         yield put(createUserFailed(error.response.data))\n//     }\n// }\n// function* onCreateuser(){\n//     yield takeLatest(types.CREATE_USER_START, onCreateUserStartAsync)\n// };\n// function* onDeleteUserStartAsync(id){\n//     try{\n//         const response = yield call(deleteUserAPI , id);\n//         if(response.status === 200){\n//             yield delay(500);\n//             yield put(deleteUserSuccess(id))\n//         }\n//     }\n//     catch (error){\n//         yield put(deleteUserFailed(error.response.data))\n//     }\n// }\n// function* onDeleteuser(){\n//     while(true){\n//         const {payload: id} = yield take(types.DELETE_USER_START)\n//         yield call(onDeleteUserStartAsync, id)\n//     }\n// };\n// //  update\n// function* onUpdateUserStartAsync(action){\n//     try{\n//         const response = yield call(updateUserAPI, action.payload.id, action.payload.user)\n//         if(response.status === 200){\n//             yield delay(500);\n//             yield put(updateUserSuccess())\n//         }\n//     }\n//     catch(error){\n//     }\n// }\n// function* onUpdateuser(){\n//     yield takeLatest(types.UPDATE_USER_START, onUpdateUserStartAsync)\n// };\n// const userSagas = [\n//     fork(onLoaduser),\n//     fork(onCreateuser),\n//     fork(onDeleteuser),\n//     fork(onUpdateuser)\n// ];\n// export default userSagas;","map":{"version":3,"sources":["D:/react/redux-saga-crud/src/redux/saga/handler/userSaga.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import {\r\n//     takeEvery,\r\n//     takeLatest,\r\n//     take,\r\n//     put,\r\n//     delay,\r\n//     fork,\r\n//     call\r\n// } from 'redux-saga/effects';\r\n\r\n// import { loadUserAPI, createUserAPI, deleteUserAPI, updateUserAPI } from '../../../apis/user';\r\n// import { deleteUserSuccess, deleteUserFailed, loadUserFailed, loadUserSuccess, createUserSuccess, createUserFailed, updateUserSuccess } from '../../actions';\r\n// import * as types from '../../actions/types'\r\n\r\n// export function* onLoadUserStartAsync(){\r\n//     try{\r\n//         const response = yield call(loadUserAPI)\r\n        \r\n//         if (response.status === 200){\r\n//             yield delay(500);\r\n//             yield put(loadUserSuccess(response.data))\r\n//         } \r\n//     }\r\n//     catch (error){\r\n//         yield put(loadUserFailed(error.response.data))\r\n//     }\r\n// };\r\n\r\n// export function* onLoaduser(){\r\n//     yield takeEvery(types.LOAD_USER_START, onLoadUserStartAsync)\r\n// };\r\n\r\n// function* onCreateUserStartAsync(action){\r\n//     try{\r\n//         const response = yield call (createUserAPI, action.payload);\r\n\r\n//         if(response.status === 200){\r\n//             yield put(createUserSuccess(response.data))\r\n//         }\r\n//     }\r\n//     catch (error){\r\n//         yield put(createUserFailed(error.response.data))\r\n//     }\r\n// }\r\n\r\n// function* onCreateuser(){\r\n//     yield takeLatest(types.CREATE_USER_START, onCreateUserStartAsync)\r\n// };\r\n\r\n// function* onDeleteUserStartAsync(id){\r\n//     try{\r\n//         const response = yield call(deleteUserAPI , id);\r\n//         if(response.status === 200){\r\n//             yield delay(500);\r\n//             yield put(deleteUserSuccess(id))\r\n//         }\r\n//     }\r\n//     catch (error){\r\n//         yield put(deleteUserFailed(error.response.data))\r\n//     }\r\n// }\r\n\r\n// function* onDeleteuser(){\r\n//     while(true){\r\n//         const {payload: id} = yield take(types.DELETE_USER_START)\r\n//         yield call(onDeleteUserStartAsync, id)\r\n//     }\r\n// };\r\n\r\n\r\n// //  update\r\n// function* onUpdateUserStartAsync(action){\r\n//     try{\r\n//         const response = yield call(updateUserAPI, action.payload.id, action.payload.user)\r\n//         if(response.status === 200){\r\n//             yield delay(500);\r\n//             yield put(updateUserSuccess())\r\n//         }\r\n//     }\r\n//     catch(error){\r\n        \r\n//     }\r\n// }\r\n\r\n// function* onUpdateuser(){\r\n//     yield takeLatest(types.UPDATE_USER_START, onUpdateUserStartAsync)\r\n// };\r\n\r\n// const userSagas = [\r\n//     fork(onLoaduser),\r\n//     fork(onCreateuser),\r\n//     fork(onDeleteuser),\r\n//     fork(onUpdateuser)\r\n// ];\r\n\r\n// export default userSagas;"]},"metadata":{},"sourceType":"module"}