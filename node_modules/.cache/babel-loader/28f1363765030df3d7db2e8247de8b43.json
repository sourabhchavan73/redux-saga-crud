{"ast":null,"code":"import { takeEvery, takeLatest, take, put, delay, fork, call } from 'redux-saga/effects';\nimport { loadUserAPI, createUserAPI, deleteUserAPI } from '../../../apis/user';\nimport { deleteUserSuccess, deleteUserFailed, loadUserFailed, loadUserSuccess, createUserSuccess, createUserFailed } from '../../actions';\nimport * as types from '../../actions/types';\nexport function* onLoadUserStartAsync() {\n  try {\n    const response = yield call(loadUserAPI);\n\n    if (response.status === 200) {\n      yield delay(500);\n      yield put(loadUserSuccess(response.data));\n    }\n  } catch (error) {\n    yield put(loadUserFailed(error.response.data));\n  }\n}\n;\nexport function* onLoaduser() {\n  yield takeEvery(types.LOAD_USER_START, onLoadUserStartAsync);\n}\n;\n\nfunction* onCreateUserStartAsync(action) {\n  try {\n    const response = yield call(createUserAPI, action.payload);\n\n    if (response.status === 200) {\n      yield put(createUserSuccess(response.data));\n    }\n  } catch (error) {\n    yield put(createUserFailed(error.response.data));\n  }\n}\n\nfunction* onCreateuser() {\n  yield takeLatest(types.CREATE_USER_START, onCreateUserStartAsync);\n}\n\n;\n\nfunction* onDeleteUserStartAsync(id) {\n  try {\n    const response = yield call(deleteUserAPI, id);\n\n    if (response.status === 200) {\n      yield delay(500);\n      yield put(deleteUserSuccess(id));\n    }\n  } catch (error) {\n    yield put(deleteUserFailed(error.response.data));\n  }\n}\n\nfunction* onDeleteuser() {\n  while (true) {\n    const {\n      payload: id\n    } = yield take(types.DELETE_USER_START);\n    yield call(onDeleteUserStartAsync, id);\n  }\n}\n\n; //  update\n\nfunction* onUpdateUserStartAsync(action) {\n  try {\n    const response = yield call(createUserAPI, action.payload);\n\n    if (response.status === 200) {\n      yield put(createUserSuccess(response.data));\n    }\n  } catch (error) {\n    yield put(createUserFailed(error.response.data));\n  }\n}\n\nfunction* onUpdateuser() {\n  yield takeLatest(types.UPDATE_USER_START, onUpdateUserStartAsync);\n}\n\n;\nconst userSagas = [fork(onLoaduser), fork(onCreateuser), fork(onDeleteuser), fork(onUpdateuser)];\nexport default userSagas;","map":{"version":3,"sources":["F:/redux-saga/redux-saga-crud/src/redux/saga/handler/userSaga.js"],"names":["takeEvery","takeLatest","take","put","delay","fork","call","loadUserAPI","createUserAPI","deleteUserAPI","deleteUserSuccess","deleteUserFailed","loadUserFailed","loadUserSuccess","createUserSuccess","createUserFailed","types","onLoadUserStartAsync","response","status","data","error","onLoaduser","LOAD_USER_START","onCreateUserStartAsync","action","payload","onCreateuser","CREATE_USER_START","onDeleteUserStartAsync","id","onDeleteuser","DELETE_USER_START","onUpdateUserStartAsync","onUpdateuser","UPDATE_USER_START","userSagas"],"mappings":"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","sourcesContent":["import {\r\n    takeEvery,\r\n    takeLatest,\r\n    take,\r\n    put,\r\n    delay,\r\n    fork,\r\n    call\r\n} from 'redux-saga/effects';\r\n\r\nimport { loadUserAPI, createUserAPI, deleteUserAPI } from '../../../apis/user';\r\nimport { deleteUserSuccess, deleteUserFailed, loadUserFailed, loadUserSuccess, createUserSuccess, createUserFailed } from '../../actions';\r\nimport * as types from '../../actions/types'\r\n\r\nexport function* onLoadUserStartAsync(){\r\n    try{\r\n        const response = yield call(loadUserAPI)\r\n        \r\n        if (response.status === 200){\r\n            yield delay(500);\r\n            yield put(loadUserSuccess(response.data))\r\n        } \r\n    }\r\n    catch (error){\r\n        yield put(loadUserFailed(error.response.data))\r\n    }\r\n};\r\n\r\nexport function* onLoaduser(){\r\n    yield takeEvery(types.LOAD_USER_START, onLoadUserStartAsync)\r\n};\r\n\r\nfunction* onCreateUserStartAsync(action){\r\n    try{\r\n        const response = yield call (createUserAPI, action.payload);\r\n\r\n        if(response.status === 200){\r\n            yield put(createUserSuccess(response.data))\r\n        }\r\n    }\r\n    catch (error){\r\n        yield put(createUserFailed(error.response.data))\r\n    }\r\n}\r\n\r\nfunction* onCreateuser(){\r\n    yield takeLatest(types.CREATE_USER_START, onCreateUserStartAsync)\r\n};\r\n\r\nfunction* onDeleteUserStartAsync(id){\r\n    try{\r\n        const response = yield call(deleteUserAPI , id);\r\n        if(response.status === 200){\r\n            yield delay(500);\r\n            yield put(deleteUserSuccess(id))\r\n        }\r\n    }\r\n    catch (error){\r\n        yield put(deleteUserFailed(error.response.data))\r\n    }\r\n}\r\n\r\nfunction* onDeleteuser(){\r\n    while(true){\r\n        const {payload: id} = yield take(types.DELETE_USER_START)\r\n        yield call(onDeleteUserStartAsync, id)\r\n    }\r\n};\r\n\r\n\r\n//  update\r\nfunction* onUpdateUserStartAsync(action){\r\n    try{\r\n        const response = yield call (createUserAPI, action.payload);\r\n\r\n        if(response.status === 200){\r\n            yield put(createUserSuccess(response.data))\r\n        }\r\n    }\r\n    catch (error){\r\n        yield put(createUserFailed(error.response.data))\r\n    }\r\n}\r\n\r\nfunction* onUpdateuser(){\r\n    yield takeLatest(types.UPDATE_USER_START, onUpdateUserStartAsync)\r\n};\r\n\r\nconst userSagas = [\r\n    fork(onLoaduser),\r\n    fork(onCreateuser),\r\n    fork(onDeleteuser),\r\n    fork(onUpdateuser)\r\n];\r\n\r\nexport default userSagas;"]},"metadata":{},"sourceType":"module"}