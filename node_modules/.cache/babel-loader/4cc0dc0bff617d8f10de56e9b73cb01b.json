{"ast":null,"code":"import { takeEvery, takeLatest, take, put, delay, fork, call } from 'redux-saga/effects';\nimport { loadUserAPI, createUserAPI, deleteUserAPI, updateUserAPI } from '../../../apis/user';\nimport { deleteUserSuccess, deleteUserFailed, loadUserFailed, loadUserSuccess, createUserSuccess, createUserFailed, updateUserSuccess } from '../../actions';\nimport * as types from '../../actions/types';\nexport function* onLoadUserStartAsync() {\n  try {\n    const response = yield call(loadUserAPI);\n\n    if (response.status === 200) {\n      yield delay(500);\n      yield put(loadUserSuccess(response.data));\n    }\n  } catch (error) {\n    yield put(loadUserFailed(error.response.data));\n  }\n}\n;\nexport function* onLoaduser() {\n  yield takeEvery(types.LOAD_USER_START, onLoadUserStartAsync);\n}\n;\n\nfunction* onCreateUserStartAsync(action) {\n  try {\n    const response = yield call(createUserAPI, action.payload);\n\n    if (response.status === 200) {\n      yield put(createUserSuccess(response.data));\n    }\n  } catch (error) {\n    yield put(createUserFailed(error.response.data));\n  }\n}\n\nfunction* onCreateuser() {\n  yield takeLatest(types.CREATE_USER_START, onCreateUserStartAsync);\n}\n\n;\n\nfunction* onDeleteUserStartAsync(action) {\n  // try{\n  //     const response = yield call(deleteUserAPI , id);\n  //     if(response.status === 200){\n  //         yield delay(500);\n  //         yield put(deleteUserSuccess(id))\n  //     }\n  // }\n  // catch (error){\n  //     yield put(deleteUserFailed(error.response.data))\n  // }\n  try {\n    const response = yield call(deleteUserAPI, action.payload);\n\n    if (response.status === 200) {\n      yield delay(5000);\n      yield put(deleteUserSuccess(action.payload));\n    }\n  } catch (error) {\n    yield put(deleteUserFailed(error.response.data));\n  }\n}\n\nfunction* onDeleteuser() {\n  // while(true){\n  //     const {payload: id} = yield take(types.DELETE_USER_START)\n  //     yield call(onDeleteUserStartAsync, id)\n  // }\n  yield takeLatest(types.DELETE_USER_START, onDeleteUserStartAsync);\n}\n\n; //  update\n\nfunction* onUpdateUserStartAsync(action) {\n  try {\n    const response = yield call(updateUserAPI, action.payload.id, action.payload.user);\n\n    if (response.status === 200) {\n      yield delay(500);\n      yield put(updateUserSuccess());\n    }\n  } catch (error) {}\n}\n\nfunction* onUpdateuser() {\n  yield takeLatest(types.UPDATE_USER_START, onUpdateUserStartAsync);\n}\n\n;\nconst userSagas = [fork(onLoaduser), fork(onCreateuser), fork(onDeleteuser), fork(onUpdateuser)];\nexport default userSagas;","map":{"version":3,"sources":["D:/react/redux-saga-crud/src/redux/saga/handler/userSaga.js"],"names":["takeEvery","takeLatest","take","put","delay","fork","call","loadUserAPI","createUserAPI","deleteUserAPI","updateUserAPI","deleteUserSuccess","deleteUserFailed","loadUserFailed","loadUserSuccess","createUserSuccess","createUserFailed","updateUserSuccess","types","onLoadUserStartAsync","response","status","data","error","onLoaduser","LOAD_USER_START","onCreateUserStartAsync","action","payload","onCreateuser","CREATE_USER_START","onDeleteUserStartAsync","onDeleteuser","DELETE_USER_START","onUpdateUserStartAsync","id","user","onUpdateuser","UPDATE_USER_START","userSagas"],"mappings":"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","sourcesContent":["import {\r\n    takeEvery,\r\n    takeLatest,\r\n    take,\r\n    put,\r\n    delay,\r\n    fork,\r\n    call\r\n} from 'redux-saga/effects';\r\n\r\n\r\nimport { loadUserAPI, createUserAPI, deleteUserAPI, updateUserAPI } from '../../../apis/user';\r\nimport { deleteUserSuccess, deleteUserFailed, loadUserFailed, loadUserSuccess, createUserSuccess, createUserFailed, updateUserSuccess } from '../../actions';\r\nimport * as types from '../../actions/types'\r\n\r\nexport function* onLoadUserStartAsync(){\r\n    try{\r\n        const response = yield call(loadUserAPI)\r\n        \r\n        if (response.status === 200){\r\n            yield delay(500);\r\n            yield put(loadUserSuccess(response.data))\r\n        } \r\n    }\r\n    catch (error){\r\n        yield put(loadUserFailed(error.response.data))\r\n    }\r\n};\r\n\r\nexport function* onLoaduser(){\r\n    yield takeEvery(types.LOAD_USER_START, onLoadUserStartAsync)\r\n};\r\n\r\nfunction* onCreateUserStartAsync(action){\r\n    try{\r\n        const response = yield call (createUserAPI, action.payload);\r\n\r\n        if(response.status === 200){\r\n            yield put(createUserSuccess(response.data))\r\n        }\r\n    }\r\n    catch (error){\r\n        yield put(createUserFailed(error.response.data))\r\n    }\r\n}\r\n\r\nfunction* onCreateuser(){\r\n    yield takeLatest(types.CREATE_USER_START, onCreateUserStartAsync)\r\n};\r\n\r\nfunction* onDeleteUserStartAsync(action){\r\n    // try{\r\n    //     const response = yield call(deleteUserAPI , id);\r\n    //     if(response.status === 200){\r\n    //         yield delay(500);\r\n    //         yield put(deleteUserSuccess(id))\r\n    //     }\r\n    // }\r\n    // catch (error){\r\n    //     yield put(deleteUserFailed(error.response.data))\r\n    // }\r\n    try{\r\n        const response = yield call(deleteUserAPI, action.payload)\r\n        if (response.status === 200){\r\n            yield delay(5000);\r\n            yield put(deleteUserSuccess(action.payload))\r\n\r\n        }\r\n    }\r\n    catch (error){\r\n        yield put(deleteUserFailed(error.response.data))\r\n    }\r\n    \r\n}\r\n\r\nfunction* onDeleteuser(){\r\n    // while(true){\r\n    //     const {payload: id} = yield take(types.DELETE_USER_START)\r\n    //     yield call(onDeleteUserStartAsync, id)\r\n    // }\r\n\r\n    yield takeLatest(types.DELETE_USER_START, onDeleteUserStartAsync)\r\n};\r\n\r\n\r\n//  update\r\nfunction* onUpdateUserStartAsync(action){\r\n    try{\r\n        const response = yield call(updateUserAPI, action.payload.id, action.payload.user)\r\n        if(response.status === 200){\r\n            yield delay(500);\r\n            yield put(updateUserSuccess())\r\n        }\r\n    }\r\n    catch(error){\r\n        \r\n    }\r\n}\r\n\r\nfunction* onUpdateuser(){\r\n    yield takeLatest(types.UPDATE_USER_START, onUpdateUserStartAsync)\r\n};\r\n\r\nconst userSagas = [\r\n    fork(onLoaduser),\r\n    fork(onCreateuser),\r\n    fork(onDeleteuser),\r\n    fork(onUpdateuser)\r\n];\r\n\r\nexport default userSagas;"]},"metadata":{},"sourceType":"module"}