{"ast":null,"code":"import { take, takeEvery, takeLatest, put, all, delay, fork, call } from 'redux-saga/effects';\nimport { userAPI } from '../../../apis/user';\nimport { loadUserSuccess } from '../../actions';\nimport * as types from '../../actions/types';\nexport function* onLoadUserStartAsync() {\n  try {\n    const response = yield call(userAPI);\n\n    if (response.status === 200) {\n      yield delay(500);\n      yield put(loadUserSuccess(response.data));\n    }\n  } catch (error) {// yield put(loadUserError(error.response.data))\n  }\n}\n;\nexport function* onLoaduser() {\n  yield takeEvery(types.LOAD_USER_START, onLoadUserStartAsync);\n}\n;\nconst userSagas = [fork(onLoaduser)];\nexport default userSagas;","map":{"version":3,"sources":["F:/redux-saga/redux-saga-crud/src/redux/saga/handler/userSaga.js"],"names":["take","takeEvery","takeLatest","put","all","delay","fork","call","userAPI","loadUserSuccess","types","onLoadUserStartAsync","response","status","data","error","onLoaduser","LOAD_USER_START","userSagas"],"mappings":"AAAA,SACIA,IADJ,EAEIC,SAFJ,EAGIC,UAHJ,EAIIC,GAJJ,EAKIC,GALJ,EAMIC,KANJ,EAOIC,IAPJ,EAQIC,IARJ,QASO,oBATP;AAUA,SAASC,OAAT,QAAwB,oBAAxB;AACA,SAASC,eAAT,QAAgC,eAAhC;AACA,OAAO,KAAKC,KAAZ,MAAuB,qBAAvB;AAEA,OAAO,UAAUC,oBAAV,GAAgC;AACnC,MAAG;AACC,UAAMC,QAAQ,GAAG,MAAML,IAAI,CAACC,OAAD,CAA3B;;AACA,QAAII,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA4B;AACxB,YAAMR,KAAK,CAAC,GAAD,CAAX;AACA,YAAMF,GAAG,CAACM,eAAe,CAACG,QAAQ,CAACE,IAAV,CAAhB,CAAT;AACH;AACJ,GAND,CAOA,OAAOC,KAAP,EAAa,CACT;AACH;AAEJ;AAAA;AAED,OAAO,UAAUC,UAAV,GAAsB;AACzB,QAAMf,SAAS,CAACS,KAAK,CAACO,eAAP,EAAwBN,oBAAxB,CAAf;AACH;AAAA;AAED,MAAMO,SAAS,GAAG,CACdZ,IAAI,CAACU,UAAD,CADU,CAAlB;AAIA,eAAeE,SAAf","sourcesContent":["import {\r\n    take,\r\n    takeEvery,\r\n    takeLatest,\r\n    put,\r\n    all,\r\n    delay,\r\n    fork,\r\n    call\r\n} from 'redux-saga/effects';\r\nimport { userAPI } from '../../../apis/user';\r\nimport { loadUserSuccess } from '../../actions';\r\nimport * as types from '../../actions/types'\r\n\r\nexport function* onLoadUserStartAsync(){\r\n    try{\r\n        const response = yield call(userAPI)\r\n        if (response.status === 200){\r\n            yield delay(500);\r\n            yield put(loadUserSuccess(response.data))\r\n        } \r\n    }\r\n    catch (error){\r\n        // yield put(loadUserError(error.response.data))\r\n    }\r\n    \r\n};\r\n\r\nexport function* onLoaduser(){\r\n    yield takeEvery(types.LOAD_USER_START, onLoadUserStartAsync)\r\n};\r\n\r\nconst userSagas = [\r\n    fork(onLoaduser)\r\n];\r\n\r\nexport default userSagas;"]},"metadata":{},"sourceType":"module"}