{"ast":null,"code":"import { takeEvery, put, delay, fork, call } from 'redux-saga/effects';\nimport { loadUserAPI, createUserAPI } from '../../../apis/user';\nimport { loadUserFailed, loadUserSuccess, createUserSuccess, createUserFailed } from '../../actions';\nimport * as types from '../../actions/types';\nexport function* onLoadUserStartAsync() {\n  try {\n    const response = yield call(loadUserAPI);\n\n    if (response.status === 200) {\n      yield delay(500);\n      yield put(loadUserSuccess(response.data));\n    }\n  } catch (error) {\n    yield put(loadUserFailed(error.response.data));\n  }\n}\n;\nexport function* onLoaduser() {\n  yield takeEvery(types.LOAD_USER_START, onLoadUserStartAsync);\n}\n;\nexport function* onCreateUserStartAsync(action) {\n  try {\n    const response = yield call(createUserAPI, action.payload);\n\n    if (response.status === 200) {\n      yield delay(500);\n      yield put(createUserSuccess(response.data));\n    }\n  } catch (error) {\n    yield put(loadUserFailed(error.response.data));\n  }\n}\nexport function* onCreateuser() {\n  yield takeEvery(types.CREATE_USER_START, onCreateUserStartAsync);\n}\n;\nconst userSagas = [fork(onLoaduser), fork(onCreateuser)];\nexport default userSagas;","map":{"version":3,"sources":["F:/redux-saga/redux-saga-crud/src/redux/saga/handler/userSaga.js"],"names":["takeEvery","put","delay","fork","call","loadUserAPI","createUserAPI","loadUserFailed","loadUserSuccess","createUserSuccess","createUserFailed","types","onLoadUserStartAsync","response","status","data","error","onLoaduser","LOAD_USER_START","onCreateUserStartAsync","action","payload","onCreateuser","CREATE_USER_START","userSagas"],"mappings":"AAAA,SACIA,SADJ,EAEIC,GAFJ,EAGIC,KAHJ,EAIIC,IAJJ,EAKIC,IALJ,QAMO,oBANP;AAQA,SAASC,WAAT,EAAsBC,aAAtB,QAA2C,oBAA3C;AACA,SAASC,cAAT,EAAyBC,eAAzB,EAA0CC,iBAA1C,EAA6DC,gBAA7D,QAAqF,eAArF;AACA,OAAO,KAAKC,KAAZ,MAAuB,qBAAvB;AAEA,OAAO,UAAUC,oBAAV,GAAgC;AACnC,MAAG;AACC,UAAMC,QAAQ,GAAG,MAAMT,IAAI,CAACC,WAAD,CAA3B;;AAEA,QAAIQ,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA4B;AACxB,YAAMZ,KAAK,CAAC,GAAD,CAAX;AACA,YAAMD,GAAG,CAACO,eAAe,CAACK,QAAQ,CAACE,IAAV,CAAhB,CAAT;AACH;AACJ,GAPD,CAQA,OAAOC,KAAP,EAAa;AACT,UAAMf,GAAG,CAACM,cAAc,CAACS,KAAK,CAACH,QAAN,CAAeE,IAAhB,CAAf,CAAT;AACH;AACJ;AAAA;AAED,OAAO,UAAUE,UAAV,GAAsB;AACzB,QAAMjB,SAAS,CAACW,KAAK,CAACO,eAAP,EAAwBN,oBAAxB,CAAf;AACH;AAAA;AAED,OAAO,UAAUO,sBAAV,CAAiCC,MAAjC,EAAwC;AAC3C,MAAG;AACC,UAAMP,QAAQ,GAAG,MAAMT,IAAI,CAAEE,aAAF,EAAiBc,MAAM,CAACC,OAAxB,CAA3B;;AAEA,QAAGR,QAAQ,CAACC,MAAT,KAAoB,GAAvB,EAA2B;AACvB,YAAMZ,KAAK,CAAC,GAAD,CAAX;AACA,YAAMD,GAAG,CAACQ,iBAAiB,CAACI,QAAQ,CAACE,IAAV,CAAlB,CAAT;AACH;AACJ,GAPD,CAQA,OAAOC,KAAP,EAAa;AACT,UAAMf,GAAG,CAACM,cAAc,CAACS,KAAK,CAACH,QAAN,CAAeE,IAAhB,CAAf,CAAT;AACH;AACJ;AAED,OAAO,UAAUO,YAAV,GAAwB;AAC3B,QAAMtB,SAAS,CAACW,KAAK,CAACY,iBAAP,EAA0BJ,sBAA1B,CAAf;AACH;AAAA;AAED,MAAMK,SAAS,GAAG,CACdrB,IAAI,CAACc,UAAD,CADU,EAEdd,IAAI,CAACmB,YAAD,CAFU,CAAlB;AAKA,eAAeE,SAAf","sourcesContent":["import {\r\n    takeEvery,\r\n    put,\r\n    delay,\r\n    fork,\r\n    call\r\n} from 'redux-saga/effects';\r\n\r\nimport { loadUserAPI, createUserAPI } from '../../../apis/user';\r\nimport { loadUserFailed, loadUserSuccess, createUserSuccess, createUserFailed } from '../../actions';\r\nimport * as types from '../../actions/types'\r\n\r\nexport function* onLoadUserStartAsync(){\r\n    try{\r\n        const response = yield call(loadUserAPI)\r\n        \r\n        if (response.status === 200){\r\n            yield delay(500);\r\n            yield put(loadUserSuccess(response.data))\r\n        } \r\n    }\r\n    catch (error){\r\n        yield put(loadUserFailed(error.response.data))\r\n    }\r\n};\r\n\r\nexport function* onLoaduser(){\r\n    yield takeEvery(types.LOAD_USER_START, onLoadUserStartAsync)\r\n};\r\n\r\nexport function* onCreateUserStartAsync(action){\r\n    try{\r\n        const response = yield call (createUserAPI, action.payload);\r\n\r\n        if(response.status === 200){\r\n            yield delay(500);\r\n            yield put(createUserSuccess(response.data))\r\n        }\r\n    }\r\n    catch (error){\r\n        yield put(loadUserFailed(error.response.data))\r\n    }\r\n}\r\n\r\nexport function* onCreateuser(){\r\n    yield takeEvery(types.CREATE_USER_START, onCreateUserStartAsync)\r\n};\r\n\r\nconst userSagas = [\r\n    fork(onLoaduser),\r\n    fork(onCreateuser)\r\n];\r\n\r\nexport default userSagas;"]},"metadata":{},"sourceType":"module"}